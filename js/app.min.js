var initialData = [
    {
        'PartNumber': '2016096',
        'Material': '5000',
        'Gauge': '0.8',
        'Volume': '27554.38496',
        'MODEL': 'Model S',
        'Coil_Supplier': 'ABC China',
        'Stamping_Supplier': 'NOS Mexica',
        'Production_LT': 10,
        'Logistics_LT': '5',
        'Capacity': '50%',
        'Location': 'ABC China',
        'Poly_Order': 1,
        'Coordinates': [
            {
                'lat': 38.96904,
                'lng': 117.73725,
                'isRoad': true
            },
            {
                'lat': 38.20365,
                'lng': 121.37695,
                'isRoad': false
            },
            {
                'lat': 36.80928,
                'lng': 124.45312,
                'isRoad': false
            },
            {
                'lat': 31.54108,
                'lng': 125.46386,
                'isRoad': false
            },
            {
                'lat': 26.94165,
                'lng': 135.43945,
                'isRoad': false
            },
            {
                'lat': 26.90247,
                'lng': 158.73046,
                'isRoad': false
            },
            {
                'lat': 24.04646,
                'lng': -133.76953,
                'isRoad': false
            },
            {
                'lat': 14.61547,
                'lng': -97.74536,
                'isRoad': false
            },
            {
                'lat': 16.15722,
                'lng': -95.20503,
                'isRoad': true
            }
        ]
    },
    {
        'PartNumber': '2016096',
        'Material': '5000',
        'Gauge': '0.8',
        'Volume': '27554.38496',
        'MODEL': 'Model S',
        'Coil_Supplier': 'ABC China',
        'Stamping_Supplier': 'NOS Mexica',
        'Production_LT': 4,
        'Logistics_LT': '2',
        'Capacity': '80%',
        'Location': 'NOS Mexica',
        'Poly_Order': 2,
        'Coordinates': []
    },
    {
        'PartNumber': '2019058',
        'Material': '5000',
        'Gauge': '1.4',
        'Volume': '38327.12028',
        'MODEL': 'Model S',
        'Coil_Supplier': 'ABC China',
        'Stamping_Supplier': 'NAVAGIS',
        'Production_LT': 10,
        'Logistics_LT': '5',
        'Capacity': '50%',
        'Location': 'ABC China',
        'Poly_Order': 1,
        'Coordinates': [
            {
                'lat': 38.96904,
                'lng': 117.73725,
                'isRoad': true
            },
            {
                'lat': 38.20365,
                'lng': 121.37695,
                'isRoad': false
            },
            {
                'lat': 36.80928,
                'lng': 124.4531,
                'isRoad': false
            },
            {
                'lat': 31.54108,
                'lng': 125.46386,
                'isRoad': false
            },
            {
                'lat': 26.94165,
                'lng': 135.43945,
                'isRoad': false
            },
            {
                'lat': 26.90247,
                'lng': 158.73046,
                'isRoad': false
            },
            {
                'lat': 31.95216,
                'lng': -172.08984,
                'isRoad': false
            },
            {
                'lat': 34.30714,
                'lng': -141.32812,
                'isRoad': false
            },
            {
                'lat': 37.7950797,
                'lng': -122.2798178,
                'isRoad': true
            }
            //{
            //    'lat': 37.79784,
            //    'lng': -122.2864,
            //    'isRoad': true
            //}
        ]
    },
    {
        'PartNumber': '2019028',
        'Material': '5000',
        'Gauge': '0.8',
        'Volume': '10126.9404',
        'MODEL': 'Model S',
        'Coil_Supplier': 'XYZ Austrilia',
        'Stamping_Supplier': 'NAVAGIS',
        'Production_LT': 6,
        'Logistics_LT': '3',
        'Capacity': '70%',
        'Location': 'XYZ Austrilia',
        'Poly_Order': 1,
        'Coordinates': [
            //{
            //    'lat': -21.269515,
            //    'lng': 149.3073,
            //    'isRoad': true
            //},
            {
                'lat': -21.330315073431787,
                'lng': 148.95263671875,
                'isRoad': true
            },
            {
                'lat': -16.29905,
                'lng': 158.99414,
                'isRoad': false
            },
            {
                'lat': -10.74696,
                'lng': 169.36523,
                'isRoad': false
            },
            {
                'lat': 4.74067,
                'lng': -159.08203,
                'isRoad': false
            },
            {
                'lat': 24.04646,
                'lng': -133.76953,
                'isRoad': false
            },
            {
                'lat': 33.7402,
                'lng': -118.26499,
                'isRoad': true
            }
        ]
    },
    {
        'PartNumber': '2019034',
        'Material': '5000',
        'Gauge': '0.8',
        'Volume': '9256.600023',
        'MODEL': 'Model S',
        'Coil_Supplier': 'XYZ Austrilia',
        'Stamping_Supplier': 'NAVAGIS',
        'Production_LT': 6,
        'Logistics_LT': '3',
        'Capacity': '70%',
        'Location': 'XYZ Austrilia',
        'Poly_Order': 1,
        'Coordinates': [
            {
                'lat': -21.269515,
                'lng': 149.3073,
                'isRoad': true
            },
            {
                'lat': -16.29905,
                'lng': 158.99414,
                'isRoad': false
            },
            {
                'lat': -10.74696,
                'lng': 169.36523,
                'isRoad': false
            },
            {
                'lat': 4.74067,
                'lng': -159.08203,
                'isRoad': false
            },
            {
                'lat': 24.04646,
                'lng': -133.76953,
                'isRoad': false
            },
            {
                'lat': 33.7402,
                'lng': -118.26499,
                'isRoad': true
            }
        ]
    },
    {
        'PartNumber': '2035892',
        'Material': '6000Left',
        'Gauge': '2',
        'Volume': '5259.74',
        'MODEL': 'Model S',
        'Coil_Supplier': 'AKA MI',
        'Stamping_Supplier': 'WOW AZ',
        'Production_LT': 8,
        'Logistics_LT': '4',
        'Capacity': '60%',
        'Location': 'AKA MI',
        'Poly_Order': 1,
        'Coordinates': []
    },
    {
        'PartNumber': '2035892',
        'Material': '6000Left',
        'Gauge': '2',
        'Volume': '5259.74',
        'MODEL': 'Model S',
        'Coil_Supplier': 'AKA MI',
        'Stamping_Supplier': 'WOW AZ',
        'Production_LT': 4,
        'Logistics_LT': '2',
        'Capacity': '45%',
        'Location': 'WOW AZ',
        'Poly_Order': 2,
        'Coordinates': []
    },
    {
        'PartNumber': '2035904',
        'Material': '5000',
        'Gauge': '1.4',
        'Volume': '5023.754',
        'MODEL': 'Model S',
        'Coil_Supplier': 'AKA MI',
        'Stamping_Supplier': 'WOW AZ',
        'Production_LT': 8,
        'Logistics_LT': '4',
        'Capacity': '60%',
        'Location': 'AKA MI',
        'Poly_Order': 1,
        'Coordinates': []
    },
    {
        'PartNumber': '2035904',
        'Material': '5000',
        'Gauge': '1.4',
        'Volume': '5023.754',
        'MODEL': 'Model S',
        'Coil_Supplier': 'AKA MI',
        'Stamping_Supplier': 'WOW AZ',
        'Production_LT': 4,
        'Logistics_LT': '2',
        'Capacity': '45%',
        'Location': 'WOW AZ',
        'Poly_Order': 2,
        'Coordinates': []
    },
    {
        'PartNumber': '2035908',
        'Material': '5000',
        'Gauge': '0.4',
        'Volume': '5108.78',
        'MODEL': 'Model S',
        'Coil_Supplier': 'AKA MI',
        'Stamping_Supplier': 'WOW AZ',
        'Production_LT': 8,
        'Logistics_LT': '4',
        'Capacity': '60%',
        'Location': 'AKA MI',
        'Poly_Order': 1,
        'Coordinates': []
    },
    {
        'PartNumber': '2035908',
        'Material': '5000',
        'Gauge': '1.4',
        'Volume': '5108.78',
        'MODEL': 'Model S',
        'Coil_Supplier': 'AKA MI',
        'Stamping_Supplier': 'WOW AZ',
        'Production_LT': 4,
        'Logistics_LT': '2',
        'Capacity': '45%',
        'Location': 'WOW AZ',
        'Poly_Order': 2,
        'Coordinates': []
    },
    {
        'PartNumber': '2019070',
        'Material': '6000Left',
        'Gauge': '1.4',
        'Volume': '11422.01617',
        'MODEL': 'Model S',
        'Coil_Supplier': 'ABC China',
        'Stamping_Supplier': 'NAVAGIS',
        'Production_LT': 10,
        'Logistics_LT': '5',
        'Capacity': '50%',
        'Location': 'ABC China',
        'Poly_Order': 1,
        'Coordinates': [
            {
                'lat': 38.96904,
                'lng': 117.73725,
                'isRoad': true
            },
            {
                'lat': 38.20365,
                'lng': 121.37695,
                'isRoad': false
            },
            {
                'lat': 36.80928,
                'lng': 124.4531,
                'isRoad': false
            },
            {
                'lat': 31.54108,
                'lng': 125.46386,
                'isRoad': false
            },
            {
                'lat': 26.94165,
                'lng': 135.43945,
                'isRoad': false
            },
            {
                'lat': 26.90247,
                'lng': 158.73046,
                'isRoad': false
            },
            {
                'lat': 31.95216,
                'lng': -172.08984,
                'isRoad': false
            },
            {
                'lat': 34.30714,
                'lng': -141.32812,
                'isRoad': false
            },
            {
                'lat': 37.7950797,
                'lng': -122.2798178,
                'isRoad': true
            }
            //{
            //    'lat': 37.79784,
            //    'lng': -122.2864,
            //    'isRoad': true
            //}
        ]
    },
    {
        'PartNumber': '2019094',
        'Material': '6000Left',
        'Gauge': '2',
        'Volume': '42473.17141',
        'MODEL': 'Model S',
        'Coil_Supplier': 'ABC China',
        'Stamping_Supplier': 'NAVAGIS',
        'Production_LT': 10,
        'Logistics_LT': '5',
        'Capacity': '50%',
        'Location': 'ABC China',
        'Poly_Order': 1,
        'Coordinates': [
            {
                'lat': 38.96904,
                'lng': 117.73725,
                'isRoad': true
            },
            {
                'lat': 38.20365,
                'lng': 121.37695,
                'isRoad': false
            },
            {
                'lat': 36.80928,
                'lng': 124.4531,
                'isRoad': false
            },
            {
                'lat': 31.54108,
                'lng': 125.46386,
                'isRoad': false
            },
            {
                'lat': 26.94165,
                'lng': 135.43945,
                'isRoad': false
            },
            {
                'lat': 26.90247,
                'lng': 158.73046,
                'isRoad': false
            },
            {
                'lat': 31.95216,
                'lng': -172.08984,
                'isRoad': false
            },
            {
                'lat': 34.30714,
                'lng': -141.32812,
                'isRoad': false
            },
            {
                'lat': 37.7950797,
                'lng': -122.2798178,
                'isRoad': true
            }
            //{
            //    'lat': 37.79784,
            //    'lng': -122.2864,
            //    'isRoad': true
            //}
        ]
    },
    {
        'PartNumber': '2118520',
        'Material': '6000Right',
        'Gauge': '0.425',
        'Volume': '9032.759012',
        'MODEL': 'Model X',
        'Coil_Supplier': 'CNC Germany',
        'Stamping_Supplier': 'NAVAGIS',
        'Production_LT': 10,
        'Logistics_LT': '5',
        'Capacity': '80%',
        'Location': 'CNC Germany',
        'Poly_Order': 1,
        'Coordinates': [
            {
                'lat': 53.864,
                'lng': 8.70865,
                'isRoad': true
            },
            {
                'lat': 54.11094,
                'lng': 5.36132,
                'isRoad': false
            },
            {
                'lat': 51.87649,
                'lng': 2.98828,
                'isRoad': false
            },
            {
                'lat': 50.49945,
                'lng': 0.43945,
                'isRoad': false
            },
            {
                'lat': 40.7639,
                'lng': -69.47753,
                'isRoad': false
            },
            {
                'lat': 41.14556,
                'lng': -70.97167,
                'isRoad': false
            },
            {
                'lat': 41.1725,
                'lng': -73.1725,
                'isRoad': true
            }
        ]
    },
    {
        'PartNumber': '2118546',
        'Material': '6000Left',
        'Gauge': '0.8',
        'Volume': '7088.277986',
        'MODEL': 'Model X',
        'Coil_Supplier': 'CNC Germany',
        'Stamping_Supplier': 'NAVAGIS',
        'Production_LT': 10,
        'Logistics_LT': '5',
        'Capacity': '80%',
        'Location': 'CNC Germany',
        'Poly_Order': 1,
        'Coordinates': [
            {
                'lat': 53.864,
                'lng': 8.70865,
                'isRoad': true
            },
            {
                'lat': 54.11094,
                'lng': 5.36132,
                'isRoad': false
            },
            {
                'lat': 51.87649,
                'lng': 2.98828,
                'isRoad': false
            },
            {
                'lat': 50.49945,
                'lng': 0.43945,
                'isRoad': false
            },
            {
                'lat': 40.7639,
                'lng': -69.47753,
                'isRoad': false
            },
            {
                'lat': 41.14556,
                'lng': -70.97167,
                'isRoad': false
            },
            {
                'lat': 41.1725,
                'lng': -73.1725,
                'isRoad': true
            }
        ]
    },
    {
        'PartNumber': '2118560',
        'Material': '6000Left',
        'Gauge': '1.4',
        'Volume': '8985.82394',
        'MODEL': 'Model X',
        'Coil_Supplier': 'FXC Russia',
        'Stamping_Supplier': 'NAVAGIS',
        'Production_LT': 14,
        'Logistics_LT': '7',
        'Capacity': '38%',
        'Location': 'FXC Russia',
        'Poly_Order': 1,
        'Coordinates': [
            {
                'lat': 68.96888,
                'lng': 33.06111,
                'isRoad': true
            },
            {
                'lat': 68.9781,
                'lng': 33.04172,
                'isRoad': false
            },
            {
                'lat': 69.05334,
                'lng': 33.05992,
                'isRoad': false
            },
            {
                'lat': 69.10214,
                'lng': 33.40873,
                'isRoad': false
            },
            {
                'lat': 69.13934,
                'lng': 33.45886,
                'isRoad': false
            },
            {
                'lat': 69.19526,
                'lng': 33.53507,
                'isRoad': false
            },
            {
                'lat': 69.31613,
                'lng': 33.51997,
                'isRoad': false
            },
            {
                'lat': 69.63606,
                'lng': 33.56323,
                'isRoad': false
            },
            {
                'lat': 71.93815,
                'lng': 26.08154,
                'isRoad': false
            },
            {
                'lat': 70.19999,
                'lng': 14.41406,
                'isRoad': false
            },
            {
                'lat': 59.977,
                'lng': -22.23632,
                'isRoad': false
            },
            {
                'lat': 44.46515,
                'lng': -48.33984,
                'isRoad': false
            },
            {
                'lat': 40.7639,
                'lng': -69.47753,
                'isRoad': false
            },
            {
                'lat': 41.14556,
                'lng': -70.97167,
                'isRoad': false
            },
            {
                'lat': 41.1725,
                'lng': -73.1726,
                'isRoad': true
            }
        ]
    },
    {
        'PartNumber': '2119870',
        'Material': '6000Left',
        'Gauge': '2.75',
        'Volume': '37811.50424',
        'MODEL': 'Model X',
        'Coil_Supplier': 'TEC Korea',
        'Stamping_Supplier': 'WOW AZ',
        'Production_LT': 16,
        'Logistics_LT': '8',
        'Capacity': '55%',
        'Location': 'TEC Korea',
        'Poly_Order': 1,
        'Coordinates': [
            {
                'lat': 35.10161,
                'lng': 129.03604,
                'isRoad': false
            },
            {
                'lat': 29.38217,
                'lng': 128.67187,
                'isRoad': false
            },
            {
                'lat': 26.94165,
                'lng': 135.43945,
                'isRoad': false
            },
            {
                'lat': 26.90247,
                'lng': 158.73046,
                'isRoad': false
            },
            {
                'lat': 31.95216,
                'lng': -172.08984,
                'isRoad': false
            },
            {
                'lat': 34.30714,
                'lng': -141.32812,
                'isRoad': false
            },
            {
                'lat': 33.7402,
                'lng': -118.26499,
                'isRoad': true
            }
        ]
    },
    {
        'PartNumber': '2119870',
        'Material': '6000Left',
        'Gauge': '2.75',
        'Volume': '37811.50424',
        'MODEL': 'Model X',
        'Coil_Supplier': 'TEC Korea',
        'Stamping_Supplier': 'WOW AZ',
        'Production_LT': 4,
        'Logistics_LT': '2',
        'Capacity': '45%',
        'Location': 'WOW AZ',
        'Poly_Order': 2,
        'Coordinates': []
    },
    {
        'PartNumber': '2119848',
        'Material': '6000Left',
        'Gauge': '1.4',
        'Volume': '13460.51362',
        'MODEL': 'Model X',
        'Coil_Supplier': 'TEC Korea',
        'Stamping_Supplier': 'WOW AZ',
        'Production_LT': 16,
        'Logistics_LT': '8',
        'Capacity': '55%',
        'Location': 'TEC Korea',
        'Poly_Order': 1,
        'Coordinates': [
            {
                'lat': 35.10161,
                'lng': 129.03604,
                'isRoad': false
            },
            {
                'lat': 29.38217,
                'lng': 128.67187,
                'isRoad': false
            },
            {
                'lat': 26.94165,
                'lng': 135.43945,
                'isRoad': false
            },
            {
                'lat': 26.90247,
                'lng': 158.73046,
                'isRoad': false
            },
            {
                'lat': 31.95216,
                'lng': -172.08984,
                'isRoad': false
            },
            {
                'lat': 34.30714,
                'lng': -141.32812,
                'isRoad': false
            },
            {
                'lat': 33.7402,
                'lng': -118.26499,
                'isRoad': true
            }
        ]
    },
    {
        'PartNumber': '2119848',
        'Material': '6000Left',
        'Gauge': '1.4',
        'Volume': '13460.51362',
        'MODEL': 'Model X',
        'Coil_Supplier': 'TEC Korea',
        'Stamping_Supplier': 'WOW AZ',
        'Production_LT': 4,
        'Logistics_LT': '8',
        'Capacity': '45%',
        'Location': 'WOW AZ',
        'Poly_Order': 2,
        'Coordinates': []
    }
];

var simplifiedData = [
    {
        'PartNumber': '2016096',
        'Material': '5000',
        'Gauge': '0.8',
        'Volume': '27554.38496',
        'MODEL': 'Model S',
        'Coil_Supplier': 'ABC China',
        'Stamping_Supplier': 'NOS Mexica',
        'Production_LT': 10,
        'Logistics_LT': 'NEED INPUT',
        'Capacity': '50%'
    },
    {
        'PartNumber': '2019058',
        'Material': '5000',
        'Gauge': '1.4',
        'Volume': '38327.12028',
        'MODEL': 'Model S',
        'Coil_Supplier': 'ABC China',
        'Stamping_Supplier': 'NAVAGIS',
        'Production_LT': 10,
        'Logistics_LT': 'NEED INPUT',
        'Capacity': '50%'
    },
    {
        'PartNumber': '2019028',
        'Material': '5000',
        'Gauge': '0.8',
        'Volume': '10126.9404',
        'MODEL': 'Model S',
        'Coil_Supplier': 'XYZ Austrilia',
        'Stamping_Supplier': 'NAVAGIS',
        'Production_LT': 6,
        'Logistics_LT': 'NEED INPUT',
        'Capacity': '70%'
    },
    {
        'PartNumber': '2019034',
        'Material': '5000',
        'Gauge': '0.8',
        'Volume': '9256.600023',
        'MODEL': 'Model S',
        'Coil_Supplier': 'XYZ Austrilia',
        'Stamping_Supplier': 'NAVAGIS',
        'Production_LT': 6,
        'Logistics_LT': 'NEED INPUT',
        'Capacity': '70%'
    },
    {
        'PartNumber': '2035892',
        'Material': '6000',
        'Gauge': '2',
        'Volume': '5259.74',
        'MODEL': 'Model S',
        'Coil_Supplier': 'AKA MI',
        'Stamping_Supplier': 'WOW AZ',
        'Production_LT': 8,
        'Logistics_LT': 'NEED INPUT',
        'Capacity': '60%'
    },
    {
        'PartNumber': '2035904',
        'Material': '5000',
        'Gauge': '1.4',
        'Volume': '5023.754',
        'MODEL': 'Model S',
        'Coil_Supplier': 'AKA MI',
        'Stamping_Supplier': 'WOW AZ',
        'Production_LT': 8,
        'Logistics_LT': 'NEED INPUT',
        'Capacity': '60%'
    },
    {
        'PartNumber': '2035908',
        'Material': '5000',
        'Gauge': '0.4',
        'Volume': '5108.78',
        'MODEL': 'Model S',
        'Coil_Supplier': 'AKA MI',
        'Stamping_Supplier': 'WOW AZ',
        'Production_LT': 8,
        'Logistics_LT': 'NEED INPUT',
        'Capacity': '60%'
    },
    {
        'PartNumber': '2019070',
        'Material': '6000',
        'Gauge': '1.4',
        'Volume': '11422.01617',
        'MODEL': 'Model S',
        'Coil_Supplier': 'ABC China',
        'Stamping_Supplier': 'NAVAGIS',
        'Production_LT': 10,
        'Logistics_LT': 'NEED INPUT',
        'Capacity': '50%'
    },
    {
        'PartNumber': '2019094',
        'Material': '6000',
        'Gauge': '2',
        'Volume': '42473.17141',
        'MODEL': 'Model S',
        'Coil_Supplier': 'ABC China',
        'Stamping_Supplier': 'NAVAGIS',

        'Production_LT': 10,
        'Logistics_LT': 'NEED INPUT',
        'Capacity': '50%'
    },
    {
        'PartNumber': '2118520',
        'Material': '6000',
        'Gauge': '0.425',
        'Volume': '9032.759012',
        'MODEL': 'Model X',
        'Coil_Supplier': 'CNC Germany',
        'Stamping_Supplier': 'NAVAGIS',
        'Production_LT': 10,
        'Logistics_LT': 'NEED INPUT',
        'Capacity': '80%'
    },
    {
        'PartNumber': '2118546',
        'Material': '6000',
        'Gauge': '0.8',
        'Volume': '7088.277986',
        'MODEL': 'Model X',
        'Coil_Supplier': 'CNC Germany',
        'Stamping_Supplier': 'NAVAGIS',
        'Production_LT': 10,
        'Logistics_LT': 'NEED INPUT',
        'Capacity': '80%'
    },
    {
        'PartNumber': '2118560',
        'Material': '6000',
        'Gauge': '1.4',
        'Volume': '8985.82394',
        'MODEL': 'Model X',
        'Coil_Supplier': 'FXC Russia',
        'Stamping_Supplier': 'NAVAGIS',
        'Production_LT': 14,
        'Logistics_LT': 'NEED INPUT',
        'Capacity': '38%'
    },
    {
        'PartNumber': '2119870',
        'Material': '6000',
        'Gauge': '2.75',
        'Volume': '37811.50424',
        'MODEL': 'Model X',
        'Coil_Supplier': 'TEC Korea',
        'Stamping_Supplier': 'WOW AZ',
        'Production_LT': 16,
        'Logistics_LT': 'NEED INPUT',
        'Capacity': '55%'
    },
    {
        'PartNumber': '2119848',
        'Material': '6000',
        'Gauge': '1.4',
        'Volume': '13460.51362',
        'MODEL': 'Model X',
        'Coil_Supplier': 'TEC Korea',
        'Stamping_Supplier': 'WOW AZ',
        'Production_LT': 16,
        'Logistics_LT': 'NEED INPUT',
        'Capacity': '55%'
    }
];

var companyData = {
    'ABC China': {
        'lat': 39.630867,
        'lng': 118.180194,
        'isRoad': true
    },
    'NOS Mexica': {
        'lat': 21.161908,
        'lng': -86.851528,
        'isRoad': true
    },
    //'NAVAGIS':
    //	{
    //		'lat': 37.492667,
    //		'lng': -121.944091,
    //       'isRoad': true
    //	},
    'NAVAGIS': {
        'lat': 37.4920201,
        'lng': -121.9455625,
        'isRoad': true
    },
    //'XYZ Austrilia':
    //	{
    //		'lat': -20.597908,
    //		'lng': 117.171393,
    //       'isRoad': true
    //	},
    'XYZ Austrilia': {
        'lat': -20.65463117436421,
        'lng': 117.14996337890625,
        'isRoad': true
    },
    'AKA MI': {
        'lat': 42.96336,
        'lng': -85.668086,
        'isRoad': true
    },
    'WOW AZ': {
        'lat': 33.448377,
        'lng': -112.074037,
        'isRoad': true
    },
    'CNC Germany': {
        'lat': 52.42265,
        'lng': 10.786546,
        'isRoad': true
    },
    'FXC Russia': {
        'lat': 55.755826,
        'lng': 37.6173,
        'isRoad': true
    },
    'TEC Korea': {
        'lat': 37.566535,
        'lng': 126.977969,
        'isRoad': true
    }
};

//(function () {
//    'use strict';

    var teslaMarkersData = [
        {
            title: 'ABC China',
            icon: 'images/c-marker.png',
            position: {lat: 39.630867, lng: 118.180194},
            content: {
                production_lead_time: 10,
                logistics_lead_time: 16,
                capacity: '50%'
            }
        },
        {
            title: 'NOS Mexica',
            icon: 'images/s-marker.png',
            position: {lat: 21.161908, lng: -86.851528},
            content: {
                production_lead_time: 4,
                capacity: '80%'
            }
        },
        {
            title: 'NAVAGIS',
            icon: 'images/tesla-marker.png',
            position: {lat: 37.492667, lng: -121.944091},
            content: {
                production_lead_time: 2,
                capacity: '90%'
            }
        },
        {
            title: 'XYZ Austrilia',
            icon: 'images/c-marker.png',
            position: {lat: -20.597908, lng: 117.171393},
            content: {
                production_lead_time: 6,
                capacity: '70%'
            }
        },
        {
            title: 'AKA MI',
            icon: 'images/c-marker.png',
            position: {lat: 42.96336, lng: -85.668086},
            content: {
                production_lead_time: 8,
                capacity: '60%'
            }
        },
        {
            title: 'WOW AZ',
            icon: 'images/s-marker.png',
            position: {lat: 33.448377, lng: -112.074037},
            content: {
                production_lead_time: 4,
                capacity: '45%'
            }
        },
        {
            title: 'CNC Germany',
            icon: 'images/c-marker.png',
            position: {lat: 52.42265, lng: 10.786546},
            content: {
                production_lead_time: 10,
                capacity: '80%'
            }
        },
        {
            title: 'FXC Russia',
            icon: 'images/c-marker.png',
            position: {lat: 55.755826, lng: 37.6173},
            content: {
                production_lead_time: 14,
                capacity: '38%'
            }
        },
        {
            title: 'TEC Korea',
            icon: 'images/c-marker.png',
            position: {lat: 37.566535, lng: 126.977969},
            content: {
                production_lead_time: 16,
                capacity: '55%'
            }
        }
    ];

//    angular.module('teslaBase')
//        .constant('TESLA_MARKERS', markers)
//    ;
//
//}());
//<![CDATA[

/**
 * Based on code provided by Mike Williams
 * http://econym.org.uk/gmap/arrows.htm
 * Improved and transformed to v3
 */

var map, setArrows;
var polylines = {};
var markers = {};
//            var road_path1 = new google.maps.MVCArray(), direction_service1 = new google.maps.DirectionsService(), road_poly1;
var direction_service = new google.maps.DirectionsService();
var lineSymbol = {
    path: 'M 0, -1 0, 1',
    strokeOpacity: 1,
    scale: 2
};

function ArrowHandler() {
    this.setMap(map);
    // Markers with 'head' arrows must be stored
    this.arrowheads = [];
}
// Extends OverlayView from the Maps API
ArrowHandler.prototype = new google.maps.OverlayView();

// Draw is inter alia called on zoom change events.
// So we can use the draw method as zoom change listener
ArrowHandler.prototype.draw = function () {

    if (this.arrowheads.length > 0) {
        for (var i = 0, m; m = this.arrowheads[i]; i++) {
            m.setOptions({position: this.usePixelOffset(m.p1, m.p2)});
        }
    }
};


// Computes the length of a polyline in pixels
// to adjust the position of the 'head' arrow
ArrowHandler.prototype.usePixelOffset = function (p1, p2) {

    var proj = this.getProjection();
    var g = google.maps;
    var dist = 12; // Half size of triangle icon

    var pix1 = proj.fromLatLngToContainerPixel(p1);
    var pix2 = proj.fromLatLngToContainerPixel(p2);
    var vector = new g.Point(pix2.x - pix1.x, pix2.y - pix1.y);
    var length = Math.sqrt(vector.x * vector.x + vector.y * vector.y);
    var normal = new g.Point(vector.x / length, vector.y / length);
    var offset = new g.Point(pix2.x - dist * normal.x, pix2.y - dist * normal.y);

    return proj.fromContainerPixelToLatLng(offset);
};


// Returns the triangle icon object
ArrowHandler.prototype.addIcon = function (file) {
    var g = google.maps;
    var icon = {
        url: "http://www.google.com/mapfiles/" + file,
        size: new g.Size(24, 24), anchor: new g.Point(12, 12)
    };
    return icon;
};

// Creates markers with corresponding triangle icons
ArrowHandler.prototype.create = function (p1, p2, center_pos, mode, partNumber) {
    var markerpos;
    var g = google.maps;
    if (mode == "onset") markerpos = p1;
    else if (mode == "head") markerpos = this.usePixelOffset(p1, p2);
    else if (mode == "midline") markerpos = center_pos; //g.geometry.spherical.interpolate(p1, p2, 0.5);

    // Compute the bearing of the line in degrees
    var dir = g.geometry.spherical.computeHeading(p1, p2).toFixed(1);
    // round it to a multiple of 3 and correct unusable numbers
    dir = Math.round(dir / 3) * 3;
    if (dir < 0) dir += 240;
    if (dir > 117) dir -= 120;

    //temporary: need to come up an algorithm for this
    if (dir == 45) // || dir == 27
        dir = 81;

    if (dir == 84)
        dir = 117;

    // use the corresponding icon
    var icon = this.addIcon("dir_" + dir + ".png");
    var marker = new g.Marker({
        position: markerpos,
        map: map, icon: icon, clickable: true
    });

//                var marker = new g.Marker({
//                    position: markerpos,
//                    map: map,
////                    icon: icon,
//                    clickable: true
//                });
//                var heading = g.geometry.spherical.computeHeading(p1, p2);
//                marker.setIcon({
//                    path: g.SymbolPath.FORWARD_CLOSED_ARROW,
//                    scale: 6,
//                    rotation: heading
//                });

    // logic to concatenate source - destination
    var destination = partNumber.Stamping_Supplier;
    if (partNumber.Location == destination)
        destination = 'TESLA';

    var routeDiv = '<div>' +
        '	<h1 class="infoWindowHeading">' + partNumber.Location + ' to ' + destination + '</h1>' +
        '	<div>' +
        '		<table>' +
        '			<tr>' +
        '				<td class="tdLeft"> Production Lead Time </td> <td class="tdRight">' + partNumber.Production_LT + '</td>' +
        '			</tr>' +
        '			<tr>' +
        '				<td class="tdLeft"> Logistics Lead Time </td> <td class="tdRight">' + partNumber.Logistics_LT + '</td>' +
        '			</tr>' +
        '			<tr>' +
        '				<td class="tdLeft"> Capacity </td> <td class="tdRight">' + partNumber.Capacity + '</td>' +
        '			</tr>' +
        '		</ul>' +
        '	</div>' +
        '</div>';
    var routeInfowindow = new google.maps.InfoWindow({content: routeDiv});
    google.maps.event.addListener(marker, 'click', function () {
        routeInfowindow.open(map, marker);
    });

    if (markers[partNumber.PartNumber]) {
        markers[partNumber.PartNumber].push(marker);
    } else {
        markers[partNumber.PartNumber] = [];
        markers[partNumber.PartNumber].push(marker);
    }

    if (mode == "head") {
        // Store markers with 'head' arrows to adjust their offset position on zoom change
        marker.p1 = p1;
        marker.p2 = p2;
        // marker.setValues({ p1: p1, p2: p2 });
        this.arrowheads.push(marker);
    }
};

ArrowHandler.prototype.load = function (points, mode, partNumber, stamp_point_start) {
    var filtered_partNumbers = filter(initialData, 'PartNumber', partNumber.PartNumber);
    if (filtered_partNumbers.length > 0) {
        sortNumbersAscending('Poly_Order', filtered_partNumbers);

        var arrow_count = 0;
        for (var i = 0; i < points.length - 1; i++) {
            if (filtered_partNumbers[arrow_count]) {
                var p1 = points[i], p2 = points[i + 1];
                var bounds = new google.maps.LatLngBounds();
                bounds.extend(p1);
                bounds.extend(p2);

                this.create(p1, p2, bounds.getCenter(), mode, filtered_partNumbers[arrow_count]);

                if ((i + 1) == stamp_point_start)
                    arrow_count += 1;
            }
        }
    }
};

// Draws a polyline with accordant arrow heads
function createPoly(coordinates, mode, partNumber, stamp_point_start) {
    if (coordinates && coordinates.length > 0) {
        var points = [];
        for (var i = 0, len = coordinates.length; i < len; i++) {
            if (coordinates[i].isRoad) {
                points.length = 0;
                for (var k = i, k_len = coordinates.length; k < k_len; k++) {
                    if (coordinates[k].isRoad) {
                        points.push(coordinates[k]);
                        if (k == (k_len - 1)) {
                            createRoadPoly(points, partNumber);
                            i = k;
                        }
                    } else {
                        createRoadPoly(points, partNumber);
                        i = k - 1;
                        break;
                    }
                }
            } else {
                points.length = 0;
                if (i > 0) points.push(coordinates[i - 1].LatLong);
                for (var l = i, l_len = coordinates.length; l < l_len; l++) {
                    if (!coordinates[l].isRoad) {
                        points.push(coordinates[l].LatLong);
                        if (l >= (l_len + 1)) {
                            createWaterPoly(points, mode, partNumber, stamp_point_start);
                        }
                    } else {
                        points.push(coordinates[l].LatLong);
                        createWaterPoly(points, mode, partNumber, stamp_point_start);
                        i = l - 1;
                        break;
                    }
                }
            }
        }
    }

//                var poly = new google.maps.Polyline({
//                    strokeColor: "#0000ff",
//                    //strokeOpacity: 0.8,
////                    strokeWeight: 3,
//                    strokeOpacity: 0,
//                    icons: [
//                        {
//                            icon: lineSymbol,
//                            offset: '0',
//                            repeat: '12px'
//                        }
//                    ],
//                    map: map,
//                    path: coordinates });
//
//                if (polylines[partNumber.PartNumber]) {
//                    polylines[partNumber.PartNumber].push(poly);
//                } else {
//                    polylines[partNumber.PartNumber] = [];
//                    polylines[partNumber.PartNumber].push(poly);
//                }
//
//                setArrows.load(coordinates, mode, partNumber, stamp_point_start);

//                var bounds = new google.maps.LatLngBounds();
//                for (var i = 0; i < path.length; i++) {
//                    bounds.extend(path[i]);
//                }
//
//                var myMarker = new google.maps.Marker({
//                    position: bounds.getCenter(),
//                    draggable: true
////                    icon: {
////                        path: 'M -2,0 0,-2 2,0 0,2 z',
////                        strokeColor: '#F00',
////                        fillColor: '#F00',
////                        fillOpacity: 2,
////                        strokeWeight: 8
////                    }
//                });
//
//                google.maps.event.addListener(myMarker, 'dragend', function (evt) {
////                    document.getElementById('current').innerHTML = '<p>Marker dropped: Current Lat: ' + evt.latLng.lat().toFixed(3) + ' Current Lng: ' + evt.latLng.lng().toFixed(3) + '</p>';
//                    console.log('Marker dropped: Current Lat: ' + evt.latLng.lat().toFixed(3) + ' Current Lng: ' + evt.latLng.lng().toFixed(3));
//                });
//
//                google.maps.event.addListener(myMarker, 'dragstart', function (evt) {
////                    document.getElementById('current').innerHTML = '<p>Currently dragging marker...</p>';
//                });
//
//                map.setCenter(myMarker.position);
//                myMarker.setMap(map);

//                return poly;
}

function createRoadPoly(points, partNumber) {
    if (points != null && points.length > 1) {
        var filtered_partNumbers = filter(initialData, 'PartNumber', partNumber.PartNumber);
        if (filtered_partNumbers.length > 0) {
            sortNumbersAscending('Poly_Order', filtered_partNumbers);

            for (var m = 1, m_len = points.length; m < m_len; m++) {
                var curr_obj_for_poly = {
                    'm': m,
                    'isNextOtherCompany': points[m - 1].isNextCompany
                };
                (function (curr_obj_for_poly) {
                    var road_path = new google.maps.MVCArray();
                    var road_poly = new google.maps.Polyline({
                        strokeColor: "#17A4DB",
                        strokeOpacity: 6,
                        strokeWeight: 8,
                        map: map
                    });
                    road_path.push(points[curr_obj_for_poly.m - 1].LatLong);
                    if (road_path.getLength() === 1) {
                        road_poly.setPath(road_path);
                    }

                    direction_service.route({
                        origin: road_path.getAt(road_path.getLength() - 1),
                        destination: points[curr_obj_for_poly.m].LatLong,
                        travelMode: google.maps.DirectionsTravelMode.DRIVING
                    }, function (result, status) {
                        if (status == google.maps.DirectionsStatus.OK) {
                            for (var i = 0, len = result.routes[0].overview_path.length; i < len; i++) {
                                road_path.push(result.routes[0].overview_path[i]);
                            }

                            var mid_point = null;
                            var road_path_len_divisible = road_path.length;
                            if ((road_path_len_divisible % 2) == 1) road_path_len_divisible -= 1;
                            mid_point = road_path.j[road_path_len_divisible / 2];
                            if (mid_point) {
                                // Add icon
                                // logic to concatenate source - destination
                                var specific_partNumber = null
                                if (curr_obj_for_poly.isNextOtherCompany) specific_partNumber = filtered_partNumbers[1]; //hard coded as of the moment
                                else specific_partNumber = filtered_partNumbers[0];

                                if (specific_partNumber) {
                                    var destination = specific_partNumber.Stamping_Supplier;
                                    if (specific_partNumber.Location == destination)
                                        destination = 'TESLA';

                                    var road_routeDiv = '<div>' +
                                        '	<h1 class="infoWindowHeading">' + specific_partNumber.Location + ' to ' + destination + '</h1>' +
                                        '	<div>' +
                                        '		<table>' +
                                        '			<tr>' +
                                        '				<td class="tdLeft"> Production Lead Time </td> <td class="tdRight">' + specific_partNumber.Production_LT + '</td>' +
                                        '			</tr>' +
                                        '			<tr>' +
                                        '				<td class="tdLeft"> Logistics Lead Time </td> <td class="tdRight">' + specific_partNumber.Logistics_LT + '</td>' +
                                        '			</tr>' +
                                        '			<tr>' +
                                        '				<td class="tdLeft"> Capacity </td> <td class="tdRight">' + specific_partNumber.Capacity + '</td>' +
                                        '			</tr>' +
                                        '		</ul>' +
                                        '	</div>' +
                                        '</div>';
                                    var road_marker = new google.maps.Marker({
                                        position: mid_point,
                                        map: map, icon: "images/truck.png"
                                    });
                                    var routeInfowindow = new google.maps.InfoWindow({content: road_routeDiv});
                                    google.maps.event.addListener(road_marker, 'click', function () {
                                        routeInfowindow.open(map, road_marker);
                                    });

                                    if (markers[partNumber.PartNumber]) {
                                        markers[partNumber.PartNumber].push(road_marker);
                                    } else {
                                        markers[partNumber.PartNumber] = [];
                                        markers[partNumber.PartNumber].push(road_marker);
                                    }
                                }
                            }
                        }
                    });

                    if (polylines[partNumber.PartNumber]) {
                        polylines[partNumber.PartNumber].push(road_poly);
                    } else {
                        polylines[partNumber.PartNumber] = [];
                        polylines[partNumber.PartNumber].push(road_poly);
                    }
                })(curr_obj_for_poly);
            }
        }
    }
}

function createWaterPoly(points, mode, partNumber, stamp_point_start) {
    if (points != null && points.length > 1) {
        var water_poly = new google.maps.Polyline({
            strokeColor: "#0000ff",
            strokeOpacity: 0,
            icons: [
                {
                    icon: lineSymbol,
                    offset: '0',
                    repeat: '12px'
                }
            ],
            map: map,
            path: points
        });

        if (polylines[partNumber.PartNumber]) {
            polylines[partNumber.PartNumber].push(water_poly);
        } else {
            polylines[partNumber.PartNumber] = [];
            polylines[partNumber.PartNumber].push(water_poly);
        }

        setArrows.load(points, mode, partNumber, stamp_point_start);
    }
}

function createTeslaInfoWindow(data) {
    var content = '<div>';
    content += '<h1 class="infoWindowHeading">' + data.title + '</h1>';
    content += '<div class="infoWindowBody">';
    content += '<table><tr>';
    content += '<td class="tdLeft"> Production Lead Time </td> <td class="tdRight">' + data.content.production_lead_time + ' days</td></tr>';
    content += '<tr><td class="tdLeft"> Capacity </td> <td class="tdRight">' + data.content.capacity + '</td></tr>';
    content += '</ul></div></div>';

    return content;
}

var teslaMarkers = [];

function loadTeslaMarkers () {
    teslaMarkersData.forEach(function(data){

        var marker = new google.maps.Marker({
            position: data.position,
            map: map,
            title: data.title,
            icon: data.icon
        });

        // InfoWindow
        marker.infowindow = new google.maps.InfoWindow({content: createTeslaInfoWindow(data), zIndex: 1});

        // Marker Listener
        google.maps.event.addListener(marker, 'click', function () {
            marker.infowindow.open(map, marker);
            marker.infowindow.setZIndex(2);
        });
    });
}

function initialize() {
    var mapOptions = {
        center: {
            lat: 31.151092,
            lng: -179.813041
        },
        zoom: 3
    };

    map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);

    loadTeslaMarkers();

    //var ABCChinaLatLng = new google.maps.LatLng(39.630867, 118.180194);
    //var ABCChinaMarker = new google.maps.Marker({
    //    position: ABCChinaLatLng,
    //    map: map,
    //    title: "ABC China",
    //    icon: "images/c-marker.png"
    //});
    //
    //google.maps.event.addListener(ABCChinaMarker, 'click', function () {
    //    ABCChinaInfowindow.open(map, ABCChinaMarker);
    //    initializeInfoWindows();
    //    ABCChinaInfowindow.setZIndex(2);
    //});
    //
    //var NOSMexicaLatLng = new google.maps.LatLng(21.161908, -86.851528);
    //var NOSMexicaMarker = new google.maps.Marker({
    //    position: NOSMexicaLatLng,
    //    map: map,
    //    title: "NOS Mexica",
    //    icon: "images/s-marker.png"
    //});
    //
    //google.maps.event.addListener(NOSMexicaMarker, 'click', function () {
    //    NOSMexicaInfowindow.open(map, NOSMexicaMarker);
    //    initializeInfoWindows();
    //    NOSMexicaInfowindow.setZIndex(2);
    //});
    //
    //var TESLALatLng = new google.maps.LatLng(37.492667, -121.944091);
    //var TESLAMarker = new google.maps.Marker({
    //    position: TESLALatLng,
    //    map: map,
    //    title: "TESLA",
    //    icon: "images/tesla-marker.png"
    //});
    //
    //google.maps.event.addListener(TESLAMarker, 'click', function () {
    //    TESLAInfowindow.open(map, TESLAMarker);
    //    initializeInfoWindows();
    //    TESLAInfowindow.setZIndex(2);
    //});
    //
    //var XYZAustriliaLatLng = new google.maps.LatLng(-20.597908, 117.171393);
    //var XYZAustriliaMarker = new google.maps.Marker({
    //    position: XYZAustriliaLatLng,
    //    map: map,
    //    title: "XYZ Austrilia",
    //    icon: "images/c-marker.png"
    //});
    //
    //google.maps.event.addListener(XYZAustriliaMarker, 'click', function () {
    //    XYZAustriliaInfowindow.open(map, XYZAustriliaMarker);
    //    initializeInfoWindows();
    //    XYZAustriliaInfowindow.setZIndex(2);
    //});
    //
    //var AKAMILatLng = new google.maps.LatLng(42.96336, -85.668086);
    //var AKAMIMarker = new google.maps.Marker({
    //    position: AKAMILatLng,
    //    map: map,
    //    title: "AKA MI",
    //    icon: "images/c-marker.png"
    //});
    //
    //google.maps.event.addListener(AKAMIMarker, 'click', function () {
    //    AKAMIInfowindow.open(map, AKAMIMarker);
    //    initializeInfoWindows();
    //    AKAMIInfowindow.setZIndex(2);
    //});
    //
    //var WOWAZLatLng = new google.maps.LatLng(33.448377, -112.074037);
    //var WOWAZMarker = new google.maps.Marker({
    //    position: WOWAZLatLng,
    //    map: map,
    //    title: "WOW AZ",
    //    icon: "images/s-marker.png"
    //});
    //
    //google.maps.event.addListener(WOWAZMarker, 'click', function () {
    //    WOWAZInfowindow.open(map, WOWAZMarker);
    //    initializeInfoWindows();
    //    WOWAZInfowindow.setZIndex(2);
    //});
    //
    //var CNCGermanyLatLng = new google.maps.LatLng(52.42265, 10.786546);
    //var CNCGermanyMarker = new google.maps.Marker({
    //    position: CNCGermanyLatLng,
    //    map: map,
    //    title: "CNC Germany",
    //    icon: "images/c-marker.png"
    //});
    //
    //google.maps.event.addListener(CNCGermanyMarker, 'click', function () {
    //    CNCGermanyInfowindow.open(map, CNCGermanyMarker);
    //    initializeInfoWindows();
    //    CNCGermanyInfowindow.setZIndex(2);
    //});
    //
    //var FXCRussiaLatLng = new google.maps.LatLng(55.755826, 37.6173);
    //var FXCRussiaMarker = new google.maps.Marker({
    //    position: FXCRussiaLatLng,
    //    map: map,
    //    title: "FXC Russia",
    //    icon: "images/c-marker.png"
    //});
    //
    //google.maps.event.addListener(FXCRussiaMarker, 'click', function () {
    //    FXCRussiaInfowindow.open(map, FXCRussiaMarker);
    //    initializeInfoWindows();
    //    FXCRussiaInfowindow.setZIndex(2);
    //});
    //
    //var TECKoreaLatLng = new google.maps.LatLng(37.566535, 126.977969);
    //var TECKoreaMarker = new google.maps.Marker({
    //    position: TECKoreaLatLng,
    //    map: map,
    //    title: "TEC Korea",
    //    icon: "images/c-marker.png"
    //});
    //
    //google.maps.event.addListener(TECKoreaMarker, 'click', function () {
    //    TECKoreaInfowindow.open(map, TECKoreaMarker);
    //    initializeInfoWindows();
    //    TECKoreaInfowindow.setZIndex(2);
    //});

    setArrows = new ArrowHandler();

//                road_poly1 = new google.maps.Polyline({
//                    strokeColor: "#17A4DB",
//                    strokeOpacity: 6,
//                    strokeWeight: 8,
//                    map: map
//                });
//
//                google.maps.event.addListener(map, "click", function (evt) {
//                    // 0 length when start
//                    if (road_path1.getLength() === 0) {
//                        // push ex. latlong { A: 97, F: 98 }
//                        road_path1.push(evt.latLng);
//                        if (road_path1.getLength() === 1) {
//                            road_poly1.setPath(road_path1);
//                        }
//                        console.log('Road Start: ', evt.latLng);
//                    } else {
//                        console.log('Road End: ', evt.latLng);
//                        direction_service1.route({
//                            origin: road_path1.getAt(road_path1.getLength() - 1),
//                            destination: evt.latLng,
//                            travelMode: google.maps.DirectionsTravelMode.DRIVING
//                        }, function (result, status) {
//                            if (status == google.maps.DirectionsStatus.OK) {
//                                for (var i = 0, len = result.routes[0].overview_path.length; i < len; i++) {
//                                    road_path1.push(result.routes[0].overview_path[i]);
//                                }
//                            }
//                        });
//                    }
//                });
}

google.maps.event.addDomListener(window, 'load', initialize);

$(document).ready(function () {
    var tableSpeed = 300;
    var navSpeed = 800;
    $('body').on('click', '.pullupTable', function () {
        var status = $(this).attr('pullup-status');
        if (status == 'off') {
            $('.showup').show();
            $('.showdown').hide();
            $(this).attr('pullup-status', 'on');
            /*$('#table-container').stop().animate({ height: [ tableHeight + 'px','swing'] },300);*/
            $('.clients_table').stop().slideUp(tableSpeed);
        } else {
            $('.showup').hide();
            $('.showdown').show();
            $(this).attr('pullup-status', 'off');
            /*$('#table-container').stop().animate({ height: ['40px','swing'] },300); */
            $('.clients_table').stop().slideDown(tableSpeed);
        }
    });
    $('body').on('click', '.tesla-logo-pulldown', function () {
        $('.navbar-container').stop().fadeIn(navSpeed);
        $('.tesla-logo-pulldown-div').stop().fadeOut(navSpeed);
    });
    $('body').on('click', '.tesla-logo', function () {
        $('.tesla-logo-pulldown-div').stop().fadeIn(navSpeed);
        $('.navbar-container').stop().fadeOut(navSpeed);
    });

    $('body').on('click', '.toggleCharts', function () {
        var chartsStatus = $(this).attr('charts-status');

        if ('off' == chartsStatus) {
            $('.TeslaRed').show();
            $('.TeslaBlack').hide();
            $(this).attr('charts-status', 'on');
        }
        else {
            $('.TeslaRed').hide();
            $('.TeslaBlack').show();
            $(this).attr('charts-status', 'off');
        }
    });

    $('.TeslaRed').hide();
    $('.showup').hide();
    $('.clients_table').stop().slideDown(tableSpeed);
    $('.tesla-logo-pulldown-div').stop().fadeOut(navSpeed);
});
(function(){
'use strict';

    var app = angular.module('teslaBase', [
        // Angular Modules
        'ui.router',
        'LocalStorageModule'
    ]);

    app.config(['$stateProvider', '$urlRouterProvider', configRoutes]);

    function configRoutes ($stateProvider, $urlRouterProvider) {

        $urlRouterProvider.otherwise("/login");

        $stateProvider
            .state('home', {
               url: '/',
               templateUrl: "templates/pages/home.html",
               controller: 'baseController',
               controllerAs: 'baseCtl'
            })
            .state('login', {
                url: '/login',
                templateUrl: "templates/pages/login.html",
                controller: 'loginController',
                controllerAs: 'loginCtl'
            });
    }

    app.config(["localStorageServiceProvider", function (localStorageServiceProvider) {
        localStorageServiceProvider
            .setPrefix('teslaDemo')
            .setStorageType('localStorage')
            .setNotify(false, false)
    }]);

    app.run(["$rootScope", "userSession", "$state", function ($rootScope, userSession, $state) {
        var statesThatRequireAuth = ['home'];
        var statesThatDoesntRequireAuth = ['login'];

        $rootScope.$on('$stateChangeStart', function (event, next, current) {
            /* Redirect to login page if user is not logged in */
            if (statesThatRequireAuth.indexOf(next.name) !== -1 && !userSession.isLoggedIn()) {
                event.preventDefault();
                $state.go('login');
            }
            /* Redirect to index if user is logged in */
            if (statesThatDoesntRequireAuth.indexOf(next.name) !== -1 && userSession.isLoggedIn()) {
                event.preventDefault();
                $state.go('home');
            }
        });
    }]);


}());
(function(){
'use strict';

var users = [
    {
        username: 'admin',
        password: 'password123'
    },
    {
        username: 'Tesla',
        password: 'teslarocks!'
    }
];

angular.module('teslaBase')
    .constant('TESLA_USERS', users)
;

}());
(function(){
'use strict';

angular.module('teslaBase')
    .factory('userSession', ['TESLA_USERS', 'localStorageService', '$state', userSession]);

    function userSession (TESLA_USERS, localStorageService, $state) {
        var service = {};

        service.authenticate = authenticate;
        service.redirectIfLoggedIn = redirectIfLoggedIn;
        service.loginUser = loginUser;
        service.logout = logout;
        service.getUser = getUser;
        service.isLoggedIn = isLoggedIn;

        function authenticate(username, password) {
            var isAuthenticated = false;
            TESLA_USERS.forEach(function (u) {
                if (u.username === username && u.password === password) {
                    isAuthenticated = true;
                    return;
                }
            });
            return isAuthenticated;
        }

        function redirectIfLoggedIn () {
            if(isLoggedIn()) {
                $state.go('home');
            }
        }

        function loginUser (user) {
            return localStorageService.set('currentUser', user.username);
        }

        function logout () {
            localStorageService.remove('currentUser');
            $state.go('login');
        }

        function getUser () {
            return localStorageService.get('currentUser');
        }

        function isLoggedIn () {
            return getUser() !== null;
        }

        return service;
    }
}());
(function(){
'use strict';

(function(){
'use strict';

angular.module('teslaBase')
    .factory('gmapServices', [gmapServices]);

    function gmapServices() {
        var service = {};

        service.defaultZoom = 3;
        service.defaultLatLng = new google.maps.LatLng(31.151092, -179.813041);

        service.apiAvailable = apiAvailable;
        service.createMap = createMap;

        service.initMarker = initMarker;
        service.createMarker = createMarker;

        service.createInfoWindow = createInfoWindow;
        service.showInfoWindow = showInfoWindow;
        service.hideInfoWindow = hideInfoWindow;

        service.addListener = addListener;

        function apiAvailable() {
            return typeof window.google === 'object';
        }

        function createMap(mapId) {
            var mapIdLoc = mapId || 'map3d';
            var myMapId = '#' + mapIdLoc;

            if (service.map) return service.map;
            if (!service.apiAvailable()) return null;

            var mapOptions = {
                zoom: service.defaultZoom,
                center: service.defaultLatLng
            };

            $(myMapId).height($(window).height());

            service.map = new google.maps.Map(document.getElementById(mapIdLoc), mapOptions);

            // handle window resize event
            google.maps.event.addDomListener(window, 'resize', function () {
                $(myMapId).height($(window).height());
                var center = service.map.getCenter();
                google.maps.event.trigger(service.map, 'resize');
                service.map.setCenter(center);
            });

            return service.map;
        }

        function initMarker(_position, _icon, _opts) {
            if (!service.apiAvailable()) return null;

            var additionalOpts = _opts || {};

            var opts = angular.extend({}, {
                position: _position,
                map: service.map,
                icon: _icon
            }, additionalOpts);

            return new google.maps.Marker(opts);
        }

        function createMarker(_position, _icon, _opts) {
            var opts = _opts || {},
                icon = _icon || 'images/c-marker.png';

            return service.initMarker(_position, icon, opts);
        }

        function createInfoWindow(content) {
            if (!service.apiAvailable()) return null;
            return new google.maps.InfoWindow({content: content});
        }


        function showInfoWindow(infoWindow, target) {
            if (infoWindow) infoWindow.open(service.map, target);
        }

        function hideInfoWindow(infoWindow) {
            if (infoWindow) infoWindow.close();
        }

        function addListener(instance, eventName, handler) {
            if (!service.apiAvailable()) return null;
            return google.maps.event.addListener(instance, eventName, handler);
        }


        return service;
    }
}());

}());
(function(){
'use strict';

angular.module('teslaBase')
    .factory('teslaMapService', ['gmapServices', 'TESLA_MARKERS', teslaMapService]);

    function teslaMapService (gmapServices, TESLA_MARKERS) {
        var service = {};

        service.initialize = initialize;

        function initialize () {
            gmapServices.createMap('map-canvas');

            TESLA_MARKERS.forEach(function(data) {
               var marker = gmapServices.createMarker(data.position, data.icon, {title: data.title});

               marker.infowindow = gmapServices.createInfoWindow(createTeslaInfoWindow(data));

               gmapServices.addListener(marker, 'click', function(){
                    gmapServices.showInfoWindow(marker.infowindow, marker);
               });
            });
        }

        function createTeslaInfoWindow(data){
            var content = '<div>';
            content += '<h1 class="infoWindowHeading">'+data.title+'</h1>';
            content += '<div class="infoWindowBody">';
            content += '<table><tr>';
            content += '<td class="tdLeft"> Production Lead Time </td> <td class="tdRight">'+data.content.production_lead_time+' days</td></tr>';
            content += '<tr><td class="tdLeft"> Capacity </td> <td class="tdRight">'+ data.content.capacity+'</td></tr>';
            content += '</ul></div></div>';

            return content;
        }

        return service;
    }
}());
(function(){
'use strict';

angular.module('teslaBase')
    .controller('loginController', ['userSession', '$state', '$timeout', loginController]);

    function loginController (userSession, $state, $timeout) {
        var vm = this;

        vm.user = {
            username: '',
            password: ''
        };

        vm.invalidLogin = false;

        vm.login = login;

        function login () {
            if (userSession.authenticate(vm.user.username, vm.user.password)) {
                userSession.loginUser(vm.user);
                $state.go('home');
            } else {
                vm.invalidLogin = true;
                $timeout(function(){
                    vm.invalidLogin = false;
                }, 3000);
            }
        }

    }
}());
(function(){
'use strict';

angular.module('teslaBase')
    .controller('baseController', ['userSession', baseController]);

    function baseController (userSession) {
        var vm = this;

        vm.currentUser = '';

        vm.initialize = initialize;
        vm.logout = logout;

        vm.initialize();

        /* Controller Functions here */

        function initialize () {
            userSession.redirectIfLoggedIn();
            vm.currentUser = userSession.getUser();
        }

        function logout () {
            userSession.logout();
        }
    }
}());
function deleteProperties(objectToClean)
{
	for (var x in objectToClean)
	{
		if (objectToClean.hasOwnProperty(x))
		{
			for (var i = 0, len = objectToClean[x].length; i < len; i++)
			{
				objectToClean[x][i].setMap(null);
			}
			
			delete objectToClean[x];
		}
	}		
}
//usage: deleteProperties(objectToClean);

function filterByKey(client)
{
	var key = this.key;
	var searchString = this.searchString;
	var result = client[key].indexOf(searchString);
	
	//var testVar = 'debug var';
	
	if(result >= 0)
		return true;
	
	return false;
}

function filter(clients, key, searchString)
{
	var testSubject = {'key' : key,
					   'searchString' : searchString
					  };
	var processedClients = clients.filter(filterByKey, testSubject);
	
	return processedClients;
}

function sortAscending(index, processedClients)
{
  var results = [];

  if(index == 'Production_LT' || index == 'PartNumber' || index == 'Material')
  {
	results = sortNumbersAscending(index, processedClients);
  }
  else if(index == 'Gauge' || index == 'Volume')
  {
	results = sortFloatAscending(index, processedClients);
  }
  else
  {
	results = sortStringAscending(index, processedClients);  
  }
  
  return results;
}

function sortDescending(index, processedClients)
{
  var results = [];

  if(index == 'Production_LT')
  {
	results = sortNumbersDescending(index, processedClients);
  }
  else if(index == 'Gauge' || index == 'Volume')
  {
	results = sortFloatDescending(index, processedClients);
  }
  else
  {
	results = sortStringDescending(index, processedClients);    
  }
  
  return results
}

function numPages(clients, recordsPerPage)
{
    return Math.ceil(clients.length / recordsPerPage);
}

function sortStringDescending(index, processedClients)
{
  processedClients.sort(function(subjectA, subjectB)
  {
	  (String(subjectA[index]) < String(subjectB[index])) ? returnVal = 1 : returnVal = 0;
	  return returnVal;
  });
  
  return processedClients;
}

function sortStringAscending(index, processedClients)
{
	processedClients.sort(function(subjectA, subjectB)
    {
	  (String(subjectA[index]) < String(subjectB[index])) ? returnVal = -1 : returnVal = 1;
	  return returnVal;
    });
   
   return processedClients;
}

function sortNumbersDescending(index, processedClients)
{
	processedClients.sort(function(subjectA, subjectB)
	{
		return parseInt(subjectB[index]) - parseInt(subjectA[index]);
	});
	
  return processedClients;
}

function sortNumbersAscending(index, processedClients)
{
	processedClients.sort(function(subjectA, subjectB)
	{
		return parseInt(subjectA[index]) - parseInt(subjectB[index]);
	});
	
  return processedClients;
}

function sortFloatDescending(index, processedClients)
{
	processedClients.sort(function(subjectA, subjectB)
	{
		return parseFloat(subjectB[index]) - parseFloat(subjectA[index]);
	});
	
  return processedClients;
}

function sortFloatAscending(index, processedClients)
{
	processedClients.sort(function(subjectA, subjectB)
	{
		return parseFloat(subjectA[index]) - parseFloat(subjectB[index]);
	});
	
  return processedClients;
}

function filterByKey_Number(partNumber)
{
    return partNumber[this.key] == this.searchNumber;
}

function filter_PartNumber_Origin(partNumbers, key1, searchString, key2, searchNumber)
{
    var search_params = {'key' : key1,
        'searchString' : searchString
    };
    var filtered_by_PartNumber = partNumbers.filter(filterByKey, search_params);
    if (filtered_by_PartNumber.length > 0) {
        var search_num_params = {'key' : key2,
            'searchNumber' : searchNumber
        };
        filtered_by_PartNumber = filtered_by_PartNumber.filter(filterByKey_Number, search_num_params);
    }

    return filtered_by_PartNumber;
}

(function () {
	'use strict';
	angular.module('teslaBase')
	.controller('teslaBaseController', ['$scope', '$http', function($scope, $http)
	{
		$scope.companys = companyData;
		$scope.clients = simplifiedData;
		$scope.processedClients = [];
		$scope.search_clients = {'PartNumber' : '',
							   'Material' : '',
							   'Gauge' : '',
							   'Volume' : '',
							   'MODEL' : '',
							   'Coil_Supplier' : '',
							   'Stamping_Supplier' : '',
							   'Production_LT' : '',
							   'Logistics_LT' : '',
							   'Capacity' : ''
							  };
		$scope.panel_display = {'client_table' : true};
		$scope.clients_table_body_display = true;
		$scope.clients_order_by_field = '';
		$scope.clients_reverse_sort = false;
		$scope.clients_current_page = 1;
		$scope.clients_per_page = 5;
		$scope.max_clients = $scope.clients.length;
		$scope.max_pages = numPages($scope.clients, $scope.clients_per_page);
		$scope.disablePrev = false;
		$scope.disableNext = false;
		$scope.reinitialzePagingVariables = false;
		$scope.filteredClients = [];
		$scope.useFilteredClients = false;
		$scope.doNotReinitializeCurrentPage = false;
		$scope.highlighted_rows = [];
		$scope.activateRefresherOrb = true;
		$scope.filterPressing = false;

		$scope.chartsFlag = false;
		$scope.showChartsModal = false;


		$scope.RefresherOrb = function()
		{
			///// reseting the charts toggle ////
			$scope.chartsFlag = false;
			$scope.chartsModalListener();
			$scope.removeBlueClass();
			$('.TeslaRed').hide();
    		$('.TeslaBlack').show();
    		$("#chartsToggle").attr('charts-status','off');
			///// reseting the charts toggle ////
			
			$scope.filterPressing = false;
			
			deleteProperties(polylines);
			deleteProperties(markers);
			
			$scope.companys = companyData;
			$scope.clients = simplifiedData;
			$scope.processedClients = [];
			$scope.search_clients = {'PartNumber' : '',
								   'Material' : '',
								   'Gauge' : '',
								   'Volume' : '',
								   'MODEL' : '',
								   'Coil_Supplier' : '',
								   'Stamping_Supplier' : '',
								   'Production_LT' : '',
								   'Logistics_LT' : '',
								   'Capacity' : ''
								  };
			$scope.panel_display = {'client_table' : true};
			$scope.clients_table_body_display = true;
			$scope.clients_order_by_field = '';
			$scope.clients_reverse_sort = false;
			$scope.clients_current_page = 1;
			$scope.clients_per_page = 5;
			$scope.max_clients = $scope.clients.length;
			$scope.max_pages = numPages($scope.clients, $scope.clients_per_page);
			$scope.disablePrev = true;
			$scope.disableNext = false;
			$scope.reinitialzePagingVariables = false;
			$scope.filteredClients = [];
			$scope.filteredClients = $scope.clients;
			$scope.useFilteredClients = false;
			$scope.doNotReinitializeCurrentPage = false;
			$scope.highlighted_rows = [];

			for(var counter = 0; counter < $scope.clients_per_page; counter++ )
			{
				$scope.processedClients.push($scope.clients[counter]);
			}
		}

		$scope._begin_update_clients_listing = function()
		{
			$scope._update_clients_listing();
			var debugVar = 'debugVariable does nothing at all';
		};

		$scope._update_clients_listing = function()
		{
			var params = $scope._build_clients_url_params();
		  	$scope.fetch_clients(params);
		};

		$scope._build_clients_url_params = function()
		{
		  	var params = {'empty' : true};
		  	
		  	if(false == $scope.activateRefresherOrb)
		  	{
		  		params['empty'] = false;
		  	}
		  	
			var debugVar = 'debugVariable does nothing at all';

			/////////////////////////////////////
			// SORT ASCENDING DESCENDING LOGIC //
			if ($scope.clients_order_by_field)
			{
				var params = {};
				params['sortBy'] = $scope.clients_order_by_field;

				if($scope.clients_reverse_sort)
				{
					params['orderBy'] = "desc";
				}
				else
				{
					params['orderBy'] = "asc";
				}
			}
			// SORT ASCENDING DESCENDING LOGIC //
			/////////////////////////////////////

			/////////////////////////////////////
			// 		 FILTER LOGIC 			   //
			if($scope.search_clients.PartNumber)
			  	params['PartNumberSearchString'] = $scope.search_clients.PartNumber;
			if($scope.search_clients.Material)
			  	params['MaterialSearchString'] = $scope.search_clients.Material;
			if($scope.search_clients.Gauge)
			 	params['GaugeSearchString'] = $scope.search_clients.Gauge;
			if($scope.search_clients.Volume)
				params['VolumeSearchString'] = $scope.search_clients.Volume;
			if($scope.search_clients.MODEL)
			 	params['MODELSearchString'] = $scope.search_clients.MODEL;
			if($scope.search_clients.Coil_Supplier)
			 	params['Coil_SupplierSearchString'] = $scope.search_clients.Coil_Supplier;
			if($scope.search_clients.Stamping_Supplier)
				params['Stamping_SupplierSearchString'] = $scope.search_clients.Stamping_Supplier;
			if($scope.search_clients.Production_LT)
			 	params['Production_LTSearchString'] = $scope.search_clients.Production_LT;
			if($scope.search_clients.Logistics_LT)
			 	params['Logistics_LTSearchString'] = $scope.search_clients.Logistics_LT;
			if($scope.search_clients.Capacity)
			 	params['CapacitySearchString'] = $scope.search_clients.Capacity;
			// 		 FILTER LOGIC 			   //
			/////////////////////////////////////

		  	return params;
		};

		$scope.search_clients_update = function()
		{
			var params = {'empty' 						  : false,
					  'PartNumberSearchString' 		  : $scope.search_clients.PartNumber,
					  'MaterialSearchString' 		  : $scope.search_clients.Material,
					  'GaugeSearchString'	 		  : $scope.search_clients.Gauge,
					  'VolumeSearchString'	 		  : $scope.search_clients.Volume,
					  'MODELSearchString'			  : $scope.search_clients.MODEL,
					  'Coil_SupplierSearchString' 	  : $scope.search_clients.Coil_Supplier,
					  'Stamping_SupplierSearchString' : $scope.search_clients.Stamping_Supplier,
					  'Production_LTSearchString' 	  : $scope.search_clients.Production_LT,
					  'Logistics_LTSearchString' 	  : $scope.search_clients.Logistics_LT,
					  'CapacitySearchString' 		  : $scope.search_clients.Capacity
					 };
			$scope.doNotReinitializeCurrentPage = false;
			$scope.fetch_clients(params);
		};

		$scope.fetch_clients = function(params)
		{
			// REFRESHER ORB
			if(params['empty'] == true)
			{
				$scope.clients = sortDescending('PartNumber', $scope.clients);
				$scope.processedClients = [];
				$scope.filteredClients = [];
				$scope.filteredClients = $scope.clients;

			  	for(var counter = 0; counter < $scope.clients_per_page; counter++ )
				{
					$scope.processedClients.push($scope.clients[counter]);
					//$scope.filteredClients.push($scope.clients[counter]);
				}

			  	$scope.disablePrev = true;
			}
			// REFRESHER ORB

			//////////////////////////////////////////////////////
			//  PROCESSING FOR SORT ASCENDING DESCENDING LOGIC  //
			var index = params['sortBy'];
			if('desc' == params['orderBy'])
			{
				$scope.processedClients = sortDescending(index, $scope.processedClients);
				var debugVariable = "debugging here";
			}
			if('asc' == params['orderBy'])
			{
				$scope.processedClients = sortAscending(index, $scope.processedClients);
				var debugVariable = "debugging here";
			}
			//  PROCESSING FOR SORT ASCENDING DESCENDING LOGIC  //
			//////////////////////////////////////////////////////

			//////////////////////////////////////////////////////
			//  		  PROCESSING FOR FILTER LOGIC			  //
			if(params['PartNumberSearchString'])
			{
				$scope.filteredClients = filter($scope.filteredClients, 'PartNumber', params['PartNumberSearchString']);
				$scope.processedClients = $scope.filteredClients;
				$scope.reinitialzePagingVariables = true;
				$scope.filterPressing = true;
			}
			if(params['MaterialSearchString'])
			{
				$scope.filteredClients = filter($scope.filteredClients, 'Material', params['MaterialSearchString']);
				$scope.processedClients = $scope.filteredClients;
				$scope.reinitialzePagingVariables = true;
				$scope.filterPressing = true;
			}
			if(params['GaugeSearchString'])
			{
				$scope.filteredClients = filter($scope.filteredClients, 'Gauge', params['GaugeSearchString']);
				$scope.processedClients = $scope.filteredClients;
				$scope.reinitialzePagingVariables = true;
				$scope.filterPressing = true;
			}
			if(params['VolumeSearchString'])
			{
				$scope.filteredClients = filter($scope.filteredClients, 'Volume', params['VolumeSearchString']);
				$scope.processedClients = $scope.filteredClients;
				$scope.reinitialzePagingVariables = true;
				$scope.filterPressing = true;
			}
			if(params['MODELSearchString'])
			{
				$scope.filteredClients = filter($scope.filteredClients, 'MODEL', params['MODELSearchString']);
				$scope.processedClients = $scope.filteredClients;
				$scope.reinitialzePagingVariables = true;
				$scope.filterPressing = true;
			}
			if(params['Coil_SupplierSearchString'])
			{
				$scope.filteredClients = filter($scope.filteredClients, 'Coil_Supplier', params['Coil_SupplierSearchString']);
				$scope.processedClients = $scope.filteredClients;
				$scope.reinitialzePagingVariables = true;
				$scope.filterPressing = true;
			}
			if(params['Stamping_SupplierSearchString'])
			{
				$scope.filteredClients = filter($scope.filteredClients, 'Stamping_Supplier', params['Stamping_SupplierSearchString']);
				$scope.processedClients = $scope.filteredClients;
				$scope.reinitialzePagingVariables = true;
				$scope.filterPressing = true;
			}
			if(params['Production_LTSearchString'])
			{
				$scope.filteredClients = filter($scope.filteredClients, 'Production_LT', params['Production_LTSearchString']);
				$scope.processedClients = $scope.filteredClients;
				$scope.reinitialzePagingVariables = true;
				$scope.filterPressing = true;
			}
			if(params['Logistics_LTSearchString'])
			{
				$scope.filteredClients = filter($scope.filteredClients, 'Logistics_LT', params['Logistics_LTSearchString']);
				$scope.processedClients = $scope.filteredClients;
				$scope.reinitialzePagingVariables = true;
				$scope.filterPressing = true;
			}
			if(params['CapacitySearchString'])
			{
				$scope.filteredClients = filter($scope.filteredClients, 'Capacity', params['CapacitySearchString']);
				$scope.processedClients = $scope.filteredClients;
				$scope.reinitialzePagingVariables = true;
				$scope.filterPressing = true;
			}

			////////////////////////////////////////
			///// Reinitialize Paging Variables
			if(true == $scope.reinitialzePagingVariables)
			{
				if(false == $scope.doNotReinitializeCurrentPage)
				{
					$scope.clients_current_page = 1;
				}

				$scope.clients_per_page 	= 5;
				$scope.max_clients			= $scope.processedClients.length;
				$scope.max_pages 			= numPages($scope.processedClients, $scope.clients_per_page);
				$scope.disablePrev 			= false;
				$scope.disableNext 			= false;
				$scope.filteredClients		= $scope.processedClients;
				$scope.useFilteredClients   = true;

				if($scope.clients_current_page == 1)
				{
				  $scope.disablePrev = true;
				  $scope.clients_current_page = 1;
				}
				else
				  $scope.disablePrev = false;

				if($scope.clients_current_page == $scope.max_pages)
				{
				  $scope.disableNext = true;
				}
				else
				  $scope.disableNext = false;


				if(0 == $scope.max_pages)
				{
					$scope.disableNext = true;
					$scope.clients_current_page = 0;
				}
			}

			$scope.reinitialzePagingVariables = false;
			///// Reinitialize Paging Variables
			////////////////////////////////////////


			var refresherOrbActivate = 0; // if it reaches 10, activate refresher orb
			for(var searchClientKey in $scope.search_clients)
			{
				var searchClientObject =  $scope.search_clients[searchClientKey];
				
				if('' == searchClientObject)
					refresherOrbActivate++
			}
			
			if(10 == refresherOrbActivate && true == $scope.filterPressing)
				$scope.RefresherOrb();

			//  		  PROCESSING FOR FILTER LOGIC			  //
			//////////////////////////////////////////////////////

			//////////////////////////////////////////////////////
			//  		  PROCESSING FOR PAGINATION LOGIC		  //
			if(true == $scope.activate_paging )
			{
				if($scope.clients_current_page == 1)
				{
				$scope.disablePrev = true;
				$scope.clients_current_page = 1;
				}
				else
				$scope.disablePrev = false;

				if($scope.clients_current_page == $scope.max_pages)
				{
				$scope.disableNext = true;
				}
				else
				$scope.disableNext = false;

				$scope.processedClients = [];
				var startingEntry = ($scope.clients_per_page * $scope.clients_current_page) - 5;
				var endingEntry	= startingEntry + ($scope.clients_per_page); // no need to subtract 1 because the "end" of slice() is ommitted by default

				if(true == $scope.useFilteredClients)
				{
				//		= $scope.processedClients;
				$scope.processedClients = $scope.filteredClients.slice( startingEntry, endingEntry);
				}
				else
				{
					$scope.processedClients = $scope.clients.slice( startingEntry, endingEntry);
				}

				$scope.activate_paging = false;
			}
			//  		  PROCESSING FOR PAGINATION LOGIC		  //
			//////////////////////////////////////////////////////
		};

		$scope.Clients_NextPage = function ()
		{
			$scope.clients_current_page += 1;
			$scope.activate_paging = true;
			$scope.activateRefresherOrb = false;
			$scope.doNotReinitializeCurrentPage = true;
			$scope._begin_update_clients_listing (  );
		};

		$scope.Clients_PrevPage = function ()
		{
			$scope.clients_current_page -= 1;
			$scope.activate_paging = true;
			$scope.activateRefresherOrb = false;
			$scope.doNotReinitializeCurrentPage = true;
			$scope._begin_update_clients_listing (  );
		};

		$scope.chartsFlagListener = function() // listener if the Charts Glyphicon has been toggled
		{
			if(false == $scope.chartsFlag) // Charts Glyphicon currently black
			{
				$scope.chartsFlag = true;
			}
			else						   // Charts Glyphicon currently red
			{
				$scope.chartsFlag = false;
				$scope.chartsModalListener();
				$scope.removeBlueClass();
			}
		}
		
		$scope.chartsModalListener = function() // listener if the charts modal is shown or not
		{
			if(true == $scope.showChartsModal)
				$scope.showChartsModal = false;
		}

		$scope.removeBlueClass = function()
		{
    		for(var index in $scope.highlighted_rows)
    		{
    			var debug = 'debugging here';

    			if( $scope.highlighted_rows[index].indexOf("blue") > -1 )
    			{
    				var debug = 'debugging here';
    				$scope.highlighted_rows[index] = $scope.highlighted_rows[index].replace(" blue", "");
    				$scope.highlighted_rows[index] = $scope.highlighted_rows[index].replace("blue", "");
    			}
    		}
		}
		
        $scope.report_PartNumberSelected_EventHandler = function (partNumber)
        {
        								  ////////////////////////////////////////////////////////////////
        	if(true == $scope.chartsFlag) //////   meaning, show charts mode
        	{
        		$scope.removeBlueClass();

        		if('' == $scope.highlighted_rows[partNumber.PartNumber] || 
        		  typeof $scope.highlighted_rows[partNumber.PartNumber] == 'undefined')
        		{
        			$scope.highlighted_rows[partNumber.PartNumber] = 'blue';
        		}
        		else
        			$scope.highlighted_rows[partNumber.PartNumber] += ' blue';
        		

        		var debug = 'debugging here';

        		var completePartsDetails = $scope.filteredClients = filter(initialData, 'PartNumber', partNumber.PartNumber);
				var barGraphCategories = [];
				var barGraphSeries = [{name: 'Production Lead Time',
									   data: []
									  },
									  {name: 'Logistics Lead Time',
									   data: []
									  }
									 ];
				var pieGraphSeriesData = [];
				var pieChartsColor = [];
				
            	// loop through the completePartsDetails and display its chart
            	for(var counter = 0; counter < completePartsDetails.length; counter++)
            	{
            		var part = completePartsDetails[counter];
					
					if(part.Location == part.Stamping_Supplier)
					{
						barGraphCategories.push(part.Location + '-' + 'NAVAGIS');
					}
					else
					{
						barGraphCategories.push(part.Coil_Supplier + '-' + part.Stamping_Supplier);
					}

					barGraphSeries[0].data[counter] = part.Production_LT;
					barGraphSeries[1].data[counter] = parseInt(part.Logistics_LT);
					
					var capacity = part.Capacity;
					capacity = capacity.replace('%','')
					pieGraphSeriesData.push({name: part.Location,
											 y: parseInt(capacity)
											}
										   );
					
					if(parseInt(capacity) >= 80) // RED
					{
						pieChartsColor.push("#E60000");
					}
					if(parseInt(capacity) >= 60 && parseInt(capacity) < 80) // YELLOW
					{
						pieChartsColor.push("#A99C0F");
					}
					if(parseInt(capacity) > 0 && parseInt(capacity) < 60) // GREEN
					{
						pieChartsColor.push("#004E0E");
					}
					
					// #E60000 RED 
					// #A99C0F YELLOW
					// #004E0E GREEN
					
					if(1 == completePartsDetails.length)
					{
						pieGraphSeriesData.push({name: 'Unused Capacity',
												 y: 100 - parseInt(capacity)
												}
											   );
						pieChartsColor.push("#444447");
					}
            	}

        		$scope.create_chart(barGraphCategories, barGraphSeries, pieGraphSeriesData, pieChartsColor);

        		var debugVar = 'debugVariable does nothing at all';
        		$scope.showChartsModal = true;
        	}	 						  //////   meaning, show charts mode
        								  ////////////////////////////////////////////////////////////////
        								  ////////////////////////////////////////////////////////////////
        	else 						  //////   meaning, show routes mode
        	{
                if ($scope.highlighted_rows[partNumber.PartNumber]=='error') {
    				$scope.highlighted_rows[partNumber.PartNumber] = '';
                    if (polylines[partNumber.PartNumber] && polylines[partNumber.PartNumber].length > 0) {
                        for (var i = 0, len = polylines[partNumber.PartNumber].length; i < len; i++) {
                            polylines[partNumber.PartNumber][i].setMap(null);
                        }
                        polylines[partNumber.PartNumber].length = 0;
                    }
                    if (markers[partNumber.PartNumber] && markers[partNumber.PartNumber].length > 0) {
                        for (var i = 0, len = markers[partNumber.PartNumber].length; i < len; i++) {
                            markers[partNumber.PartNumber][i].setMap(null);
                        }
                        markers[partNumber.PartNumber].length = 0;
                    }
                } else {
    				$scope.highlighted_rows[partNumber.PartNumber] = 'error';
                    var points = [
    					{
    						'LatLong' : new google.maps.LatLng($scope.companys[partNumber.Coil_Supplier].lat, $scope.companys[partNumber.Coil_Supplier].lng),
    						'isRoad' : $scope.companys[partNumber.Coil_Supplier].isRoad,
    						'isNextCompany': false
    					}
                    ];
    				// Get All the coordinates from coil
    				var filtered_partNumber_order1 = filter_PartNumber_Origin(initialData, 'PartNumber', partNumber.PartNumber, 'Poly_Order', 1);
    				if (filtered_partNumber_order1.length > 0) {
    					if (filtered_partNumber_order1[0].Coordinates.length > 0) {
    						for (var i = 0, len = filtered_partNumber_order1[0].Coordinates.length; i < len; i++) {
    							points.push(
    								{
    									'LatLong' : new google.maps.LatLng(filtered_partNumber_order1[0].Coordinates[i].lat, filtered_partNumber_order1[0].Coordinates[i].lng),
    									'isRoad' : filtered_partNumber_order1[0].Coordinates[i].isRoad,
    									'isNextCompany': false
    								}
    							);
    						}
    					}
    				}

    				// Add stamping coordinate
                    var stamp_point_start = points.length;
    				//points.push(new google.maps.LatLng($scope.companys[partNumber.Stamping_Supplier].lat, $scope.companys[partNumber.Stamping_Supplier].lng));
    				points.push(
    					{
    						'LatLong' : new google.maps.LatLng($scope.companys[partNumber.Stamping_Supplier].lat, $scope.companys[partNumber.Stamping_Supplier].lng),
    						'isRoad' : $scope.companys[partNumber.Stamping_Supplier].isRoad,
    						'isNextCompany': true
    					}
    				);

    				// Get All the coordinates from stamping
    				var filtered_partNumber_order2 = filter_PartNumber_Origin(initialData, 'PartNumber', partNumber.PartNumber, 'Poly_Order', 2);
    				if (filtered_partNumber_order2.length > 0) {
    					if (filtered_partNumber_order2[0].Coordinates.length > 0) {
    						for (var i = 0, len = filtered_partNumber_order2[0].Coordinates.length; i < len; i++) {
    							points.push(
    								{
    									'LatLong' : new google.maps.LatLng(filtered_partNumber_order2[0].Coordinates[i].lat, filtered_partNumber_order2[0].Coordinates[i].lng),
    									'isRoad' : filtered_partNumber_order2[0].Coordinates[i].isRoad,
    									'isNextCompany': false
    								}
    							);
    						}
    					}
    				}

                    if (partNumber.Stamping_Supplier != 'NAVAGIS') {
    					points.push(
    						{
    							'LatLong' : new google.maps.LatLng($scope.companys['NAVAGIS'].lat, $scope.companys['NAVAGIS'].lng),
    							'isRoad' : $scope.companys['NAVAGIS'].isRoad,
    							'isNextCompany': true
    						}
    					);
                    }
                    createPoly(points, "midline", partNumber, stamp_point_start);
                }
                 							//////          meaning, show routes mode
        	}	 							////////////////////////////////////////////////////////////////




        };
        
        $scope.create_chart = function(barGraphCategories, barGraphSeries, pieGraphSeriesData, pieChartsColor) 
        {
        	$('#barGraphContainer').highcharts({chart: {type: 'column'},
        										credits: {enabled: false},
        										exporting: {enabled: false},
									            title: {text: 'Production and Logistics Lead Time'},
										        xAxis: {categories: barGraphCategories,
										            	crosshair: true
										        	   },
										        yAxis: {min: 0,
										            	title: {text: 'Units (pcs)'}
										        	   },
										        tooltip: {headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
										            	  pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
										                			   '<td style="padding:0"><b>{point.y:.1f}</b></td></tr>',
										            	  footerFormat: '</table>',
										            	  shared: true,
										            	  useHTML: true
										        		  },
										        plotOptions: {column: {pointPadding: 0.2,
										                			   borderWidth: 0
										            				  }
										        			 },
										        series: barGraphSeries
			    });


        		$('#pieGraphContainer').highcharts({chart: {plotBackgroundColor: null,
													        plotBorderWidth: null,
													        plotShadow: false,
													        type: 'pie'
													       },
													colors: pieChartsColor,
	        										credits: {enabled: false},
	        										exporting: {enabled: false},
													title: {text: 'Capacity'},
													tooltip: { pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'},
													plotOptions: {pie: {allowPointSelect: true,
													                    cursor: 'pointer',
													                    dataLabels: {enabled: false},
													                    showInLegend: true
													                   }
																 },
													series: [{name: "Capacity",
													          colorByPoint: true,
													          data: pieGraphSeriesData
													         }
															]
        											});
        };

		$scope.init_highlight_rows = function() {
			for (var i = 0, len = $scope.clients.length; i < len; i++) {
				$scope.highlighted_rows.push($scope.clients[i].PartNumber);
			}
		};

		$scope._begin_update_clients_listing();
		$scope.init_highlight_rows();
	}]);
}());